<?xml ?>
<polycomConfig>
  <msg msg.bypassInstantMessage="0">
    <msg.mwi msg.mwi.1.callBack="*97" msg.mwi.1.callBackMode="contact" msg.mwi.1.subscribe="" msg.mwi.2.callBack="*97" msg.mwi.2.callBackMode="contact" msg.mwi.2.subscribe="">
    </msg.mwi>
  </msg>
  {% set x = 1 %}
  {% for line in lines %}
<nat nat.ip="{{ line.outbound_proxy.primary.host }}">
  {% endfor %}
  {% if not lines.1 %}
<nat nat.ip="{{ provision.settings.accounts.1.account_key.sip.outbound_proxy_01 }}">
  {% endif %}
  </nat>
  <reg {% set x = 1 %}{% for line in lines %}reg.1.displayName="{{ line.display_name }}" reg.1.address="{{ line.username }}" reg.1.auth.password="{{ line.auth_password }}" reg.1.auth.userId="{{ line.auth_name }}" reg.1.extension="{{ line.display_name }}" reg.1.label="{{ line.display_name }}" reg.1.outboundProxy.address="{{ line.outbound_proxy.primary.host }}" reg.1.lineKeys="1" reg.1.pin="" reg.1.useTelUriAsLineLabel="1" reg.1.server.1.address="{{ line.sip_server.primary.host }}" reg.1.server.1.port="5060" reg.1.server.1.transport="TCPOnly"  reg.1.server.1.expires="360"{% endfor %} {% set x = 1 %}{% for account_key in provision.settings.accounts %}{% set x = x + 1 %}reg.{{ x }}.displayName="{{ account_key.basic.display_name }}" reg.{{ x }}.address="{{ account_key.sip.username }}" reg.{{ x }}.auth.password="{{ account_key.sip.password }}" reg.{{ x }}.auth.userId="{{ account_key.sip.username }}" reg.{{ x }}.extension="{{ account_key.basic.display_name }}" reg.{{ x }}.label="{{ account_key.basic.display_name }}" reg.{{ x }}.outboundProxy.address="{{ account_key.sip.outbound_proxy_01 }}" reg.{{ x }}.lineKeys="{{ account_key.sip.linekeys }}" reg.{{ x }}.pin="{{ account_key.sip.pin }}" reg.{{ x }}.useTelUriAsLineLabel="1" reg.{{ x }}.server.1.address="{{ account_key.sip.realm_01 }}" reg.{{ x }}.server.1.port="{{ account_key.sip.realm_01_port }}" reg.{{ x }}.server.1.transport="TCPOnly"  reg.{{ x }}.server.1.expires="360" {% endfor %}>
  </reg>
  <voIpProt>
    <voIpProt.SIP voIpProt.SIP.enable="1">
  {% set x = 1 %}
  {% for line in lines %}
      <voIpProt.SIP.outboundProxy voIpProt.SIP.outboundProxy.address="{{ line.outbound_proxy.primary.host }}" voIpProt.SIP.outboundProxy.port="5060" voIpProt.SIP.outboundProxy.transport="TCPonly">
  {% endfor %}
  {% if not lines.1 %}
      <voIpProt.SIP.outboundProxy voIpProt.SIP.outboundProxy.address="{{ provision.settings.accounts.1.account_key.sip.outbound_proxy_01 }}" voIpProt.SIP.outboundProxy.port="5060" voIpProt.SIP.outboundProxy.transport="TCPonly">
  {% endif %}
      </voIpProt.SIP.outboundProxy>
      <voIpProt.SIP.alertInfo voIpProt.SIP.alertInfo.1.value="internalRing" voIpProt.SIP.alertInfo.1.class="custom1"/>
      <voIpProt.SIP.alertInfo voIpProt.SIP.alertInfo.2.value="externalRing" voIpProt.SIP.alertInfo.2.class="custom7"/>
    </voIpProt.SIP>
  </voIpProt>
  <feature>
    <attendant attendant.reg="1" attendant.ringType="ringer1" {% set x = 0 %}{% for line_key in provision.settings.lines %}{% set x = x + 1 %}attendant.resourceList.{{ x }}.address="{{ line_key.key.value }}" attendant.resourceList.{{ x }}.label="{{ line_key.key.label }}" attendant.resourceList.{{ x }}.type="automata" {% endfor %} />
    <feature.corporateDirectory feature.corporateDirectory.enabled="1">
    </feature.corporateDirectory>
    <feature.directedCallPickup feature.directedCallPickup.enabled="1">
    </feature.directedCallPickup>
    <feature.directory feature.directory.enabled="1">
    </feature.directory>
    <feature.callPark feature.callPark.enabled="1">
    </feature.callPark>
  </feature>
  <up up.headsetMode="1" up.analogHeadsetOption="1" up.mwiVisible="1">
  </up>
  <call call.directedCallPickupMethod="legacy" call.directedCallPickupString="" call.parkedCallRetrieveMethod="legacy" call.parkedCallRetrieveString="*31" call.callWaiting.enable="0">
  </call>
  <divert>
    <divert.busy divert.busy.1.contact="5008" divert.busy.1.enabled="1">
    </divert.busy>
  </divert>
  <tcpIpApp>
    <tcpIpApp.sntp tcpIpApp.sntp.address="pool.ntp.org" tcpIpApp.sntp.gmtOffset="36000" tcpIpApp.sntp.resyncPeriod="86400">
      <tcpIpApp.sntp.address tcpIpApp.sntp.address.overrideDHCP="0">
      </tcpIpApp.sntp.address>
      <tcpIpApp.sntp.daylightSavings tcpIpApp.sntp.daylightSavings.enable="1" tcpIpApp.sntp.daylightSavings.fixedDayEnable="0">
        <tcpIpApp.sntp.daylightSavings.start tcpIpApp.sntp.daylightSavings.start.date="1" tcpIpApp.sntp.daylightSavings.start.dayOfWeek="1" tcpIpApp.sntp.daylightSavings.start.month="10" tcpIpApp.sntp.daylightSavings.start.time="2">
          <tcpIpApp.sntp.daylightSavings.start.dayOfWeek tcpIpApp.sntp.daylightSavings.start.dayOfWeek.lastInMonth="0">
          </tcpIpApp.sntp.daylightSavings.start.dayOfWeek>
        </tcpIpApp.sntp.daylightSavings.start>
        <tcpIpApp.sntp.daylightSavings.stop tcpIpApp.sntp.daylightSavings.stop.date="1" tcpIpApp.sntp.daylightSavings.stop.dayOfWeek="1" tcpIpApp.sntp.daylightSavings.stop.month="4" tcpIpApp.sntp.daylightSavings.stop.time="2">
          <tcpIpApp.sntp.daylightSavings.stop.dayOfWeek tcpIpApp.sntp.daylightSavings.stop.dayOfWeek.lastInMonth="0">
          </tcpIpApp.sntp.daylightSavings.stop.dayOfWeek>
        </tcpIpApp.sntp.daylightSavings.stop>
      </tcpIpApp.sntp.daylightSavings>
      <tcpIpApp.sntp.gmtOffset tcpIpApp.sntp.gmtOffset.overrideDHCP="0">
      </tcpIpApp.sntp.gmtOffset>
    </tcpIpApp.sntp>
  </tcpIpApp>
  <dialplan>
    <digitmap dialplan.digitmap="" dialplan.digitmap.timeOut="3"/>
  </dialplan>
</polycomConfig>
