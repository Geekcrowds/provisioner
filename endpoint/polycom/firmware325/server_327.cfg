<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
#################PROVISIONER.NET#################
# This Configuration file was generated from the Provisioner.net Library by {$provisioner_processor_info}
# Generated on: {$provisioner_generated_timestamp}
# 
# Provisioner Information Follows:
# Brand Revision Timestamp: {$provisioner_brand_timestamp}
# Family Revision Timestamp: {$provisioner_family_timestamp}
#
##################################################
-->
<domain>

   <voIpProt>
      <local voIpProt.local.port="{{ local_port }}"/>

      <server
        voIpProt.server.1.address="{{ sip_server.1.address }}"
        voIpProt.server.1.port="{{ sip_server.1.port }}"
        voIpProt.server.1.transport="{{ sip_server.1.transport|default('UDPonly') }}"
        voIpProt.server.1.expires="{{ sip_server.1.expire.value }}"
        voIpProt.server.1.expires.overlap="{{ sip_server.1.expire.overlap }}"
        voIpProt.server.1.register="{{ sip_server.1.register|default('1') }}"
        voIpProt.server.1.retryTimeOut="{{ sip_server.1.retryTimeOut|default('0') }}"
        voIpProt.server.1.retryMaxCount="{{ sip_server.1.retryMaxCount|default('0') }}"
        voIpProt.server.1.expires.lineSeize="{{ sip_server.1.lineSeize|default('30') }}"
        voIpProt.server.1.lcs="{{ sip_server.1.lcs }}"

        voIpProt.server.2.address="{{ sip_server.2.address }}"
        voIpProt.server.2.port="{{ sip_server.2.port }}"
        voIpProt.server.2.transport="{{ sip_server.2.transport|default('UDPonly') }}"
        voIpProt.server.2.expires="{{ sip_server.2.expire.value }}"
        voIpProt.server.2.expires.overlap="{{ sip_server.2.expire.overlap }}"
        voIpProt.server.2.register="{{ sip_server.2.register|default('1') }}"
        voIpProt.server.2.retryTimeOut="{{ sip_server.2.retryTimeOut|default('0') }}"
        voIpProt.server.2.retryMaxCount="{{ sip_server.2.retryMaxCount|default('0') }}"
        voIpProt.server.2.expires.lineSeize="{{ sip_server.2.lineSeize|default('30') }}"
        voIpProt.server.2.lcs="{{ sip_server.2.lcs }}"

        voIpProt.server.dhcp.available="{{ dhcp.available }}"
        voIpProt.server.dhcp.option="{{ dhcp.option }}"
        voIpProt.server.dhcp.type="{{ dhcp.type }}"/>

      <SIP
        voIpProt.SIP.useRFC2543hold="{{ sip.useRFC2543hold|default('0') }}"

        voIpProt.SIP.useSendonlyHold="{{ sip.useSendonlyHold|default('1') }}"
        voIpProt.SIP.lcs="{{ sip.lcs|default('0') }}"
        voIpProt.SIP.sendCompactHdrs="{{ sip.sendCompactHdrs|default('0') }}"
        voIpProt.SIP.keepalive.sessionTimers="{{ sip.keepalive.sessionTimers|default('0') }}"
        voIpProt.SIP.requestURI.E164.addGlobalPrefix="{{ sip.requestURI.E164.addGlobalPrefix }}"
        voIpProt.SIP.allowTransferOnProceeding="{{ sip.allowTransferOnProceeding }}"
        voIpProt.SIP.ms-forking="{{ sip.ms_forking }}"
        voIpProt.SIP.pingInterval="{{ sip.pingInterval }}"
        voIpProt.SIP.useContactInReferTo="{{ sip.useContactInReferTo }}">

         <outboundProxy
            voIpProt.SIP.outboundProxy.address="{{ sip.outbound_proxy.address }}"
            voIpProt.SIP.outboundProxy.port="{{ sip.outbound_proxy.port|default('5060') }}}"
            voIpProt.SIP.outboundProxy.transport="{{ sip.outbound_proxy.transport|default('UDPonly') }}"/>

         <alertInfo
            voIpProt.SIP.alertInfo.1.value="{{ sip.alertInfo.1.value }}"
            voIpProt.SIP.alertInfo.1.class="{{ sip.alertInfo.1.class }}"/>

         <requestValidation
            voIpProt.SIP.requestValidation.1.request="{{ sip.requestValidation.1.request.1.value }}"
            voIpProt.SIP.requestValidation.1.method="{{ sip.requestValidation.1.method }}"
            voIpProt.SIP.requestValidation.1.request.1.event="{{ sip.requestValidation.1.request.1.event }}"

            voIpProt.SIP.requestValidation.2.request="{{ sip.requestValidation.2.request }}"
            voIpProt.SIP.requestValidation.2.method="{{ sip.requestValidation.2.method }}"
            voIpProt.SIP.requestValidation.2.request.1.event="{{ sip.requestValidation.2.request.1.event }}"

            <digest voIpProt.SIP.requestValidation.digest.realm="{{ sip.requestValidation.digest.realm|default('PolycomSPIP') }}"/>
         </requestValidation>

         <specialEvent
            voIpProt.SIP.specialEvent.lineSeize.nonStandard="{{ sip.specialEvent.lineSeize.nonStandard|default('1') }}"
            voIpProt.SIP.specialEvent.checkSync.alwaysReboot="{{ sip.specialEvent.checkSync.alwaysReboot|default('1') }}"/>

         <conference voIpProt.SIP.conference.address="{{ sip.conference.address }}"/>

         <dialog
            voIpProt.SIP.dialog.useSDP="{{ sip.dialog.useSDP }}"
            voIpProt.SIP.dialog.usePvalue="{{ sip.dialog.usePvalue }}"/>

         <connectionReuse
            voIpProt.SIP.connectionReuse.useAlias="{{ sip.connectionReuse.useAlias|default('0') }}"/>

         <SDP>
            <answer voIpProt.SDP.answer.useLocalPreferences="{{ sdp.answer.useLocalPreferences }}"/>
         </SDP>
      </SIP>
   </voIpProt>

   <dialplan
        dialplan.impossibleMatchHandling="{{ dialplan.impossibleMatchHandling|default('0') }}"
        dialplan.removeEndOfDial="{{ dialplan.removeEndOfDial|default('1') }}"
        dialplan.applyToUserSend="{{ dialplan.applyToUserSend|default('1') }}"
        dialplan.applyToUserDial="{{ dialplan.applyToUserDial|default('1') }}"
        dialplan.applyToCallListDial="{{ dialplan.applyToCallListDial|default('0') }}"
        dialplan.applyToDirectoryDial="{{ dialplan.applyToDirectoryDial|default('0') }}">

      <digitmap
        dialplan.digitmap="{{ dialplan.digitmap.value }}"
        dialplan.digitmap.timeOut="{{ dialplan.digitmap.timeout }}"/>

      <routing>
         <server dialplan.routing.server.1.address="{{ dialplan.routing.server.1.address }}"
            dialplan.routing.server.1.port="{{ dialplan.routing.server.1.port|default('5060') }}"/>

         <emergency
            dialplan.routing.emergency.1.value="{{ dialplan.routing.emergency.1.value|default('911') }}"
            dialplan.routing.emergency.1.server.1="{{ dialplan.rounting.emergency.1.server.1|default('1') }}"/>
      </routing>
   </dialplan>

   <localization>
      <datetime>

         <time
            lcl.datetime.time.24HourClock="{{ lcl.datetime.time.24HourClock|default('0') }}"/>

         <date
            lcl.datetime.date.format="{{ lcl.datetime.date.format|default('D,Md') }}"
            lcl.datetime.date.longFormat="{{ lcl.datetime.date.longFormat|default('1') }}"
            lcl.datetime.date.dateTop="{ lcl.datetime.date.dateTop|default('1') }}"/>
      </datetime>
   </localization>

   <user_preferences
      up.headsetMode="{{ up.headsetMode|default('0') }}"
      up.useDirectoryNames="{{ up.useDirectoryNames|default('0') }}"
      up.oneTouchVoiceMail="{{ up.oneTouchVoiceMail|default('0') }}"
      up.welcomeSoundEnabled="{{ up.welcomeSoundEnabled|default('1') }}"
      up.welcomeSoundOnWarmBootEnabled="{{ up.welcomeSoundOnWarmBootEnabled|default('0') }}"
      up.localClockEnabled="{{ up.localClockEnabled|default('1') }}"
      up.backlight.onIntensity="{{ up.backlight.onIntensity }}"
      up.backlight.idleIntensity="{{ up.backlight.idleIntensity }}"/>

   <feature
        feature.1.name="{{ feature.1.name|default('presence') }}"
        feature.1.enabled="{{ feature.1.enable|default('0') }}"

        feature.2.name="{{ feature.2.name|default('messaging') }}"
        feature.2.enabled="{{ feature.2.enable|default('0') }}"

        feature.3.name="{{ feature.3.name|default('directory') }}"
        feature.3.enabled="{{ feature.3.enable|default('1') }}"

        feature.4.name="{{ feature.4.name|default('calllist') }}"
        feature.4.enabled="{{ feature.4.enable|default('1') }}"

        feature.5.name="{{ feature.5.name|default('ring-download') }}"
        feature.5.enabled="{{ feature.5.enable|default('1') }}"

        feature.6.name="{{ feature.6.name|default('calllist-received') }}"
        feature.6.enabled="{{ feature.6.enable|default('1') }}"

        feature.7.name="{{ feature.7.name|default('calllist-placed') }}"
        feature.7.enabled="{{ feature.7.enable|default('1') }}"

        feature.8.name="{{ feature.8.name|default('calllist-missed') }}"
        feature.8.enabled="{{ feature.8.enable|default('1') }}"

        feature.9.name="{{ feature.9.name|default('url-dialing') }}"
        feature.9.enabled="{{ feature.9.enable|default('1') }}"

        feature.10.name="{{ feature.10.name|default('call-park') }}"
        feature.10.enabled="{{ feature.10.enable|default('0') }}"

        feature.11.name="{{ feature.11.name|default('group-call-pickup') }}"
        feature.11.enabled="{{ feature.11.enable|default('0') }}"

        feature.12.name="{{ feature.12.name|default('directed-call-pickup') }}"
        feature.12.enabled="{{ feature.12.enable|default('0') }}"

        feature.13.name="{{ feature.13.name|default('last-call-return') }}"
        feature.13.enabled="{{ feature.13.enable|default('0') }}"

        feature.14.name="{{ feature.14.name|default('acd-login-logout') }}"
        feature.14.enabled="{{ feature.14.enable|default('0') }}"

        feature.15.name="{{ feature.15.name|default('acd-agent-availability') }}"
        feature.15.enabled="{{ feature.15.enable|default('0') }}"/>

    <call
        call.rejectBusyOnDnd="{{ call.rejectBusyOnDnd|default('1') }}"
        call.enableOnNotRegistered="{{ call.enableOnNotRegistered|default('1') }}"
        call.offeringTimeOut="{{ call.offeringTimeOut|default('60') }}"
        call.ringBackTimeOut="{{ call.ringBackTimeOut|default('60') }}"
        call.dialtoneTimeOut="{{ call.dialtoneTimeOut|default('60') }}"
        call.lastCallReturnString="{{ call.lastCallReturnString|default('*69') }}"
        call.callsPerLineKey="{{ call.callsPerLineKey }}"
        call.stickyAutoLineSeize="{{ call.stickyAutoLineSeize.value }}"
        call.stickyAutoLineSeize.onHookDialing="{{ call.stickyAutoLineSeize.onHookDialing }}"
        call.singleKeyPressConference="{{ call.singleKeyPressConference|default('0') }}"
        call.localConferenceCallHold="{{ call.localConferenceCallHold }}"
        call.transfer.blindPreferred="{{ call.transfer.blindPreferred }}"
        call.directedCallPickupString="{{ call.directedCallPickupString|default('*97') }}">

      <donotdisturb call.donotdisturb.perReg="{{ call.donotdisturb.perReg|default('0') }}"/>

      <shared
        call.shared.disableDivert="{{ call.shared.disableDivert|default('1') }}"
        call.shared.seizeFailReorder="{{ call.shared.seizeFailReorder|default('1') }}"
        call.shared.oneTouchResume="{{ call.shared.oneTouchResume|default('0') }}"
        call.shared.exposeAutoHolds="{{ call.shared.exposeAutoHolds|default('0') }}"/>

      <hold>
         <localReminder
            call.hold.localReminder.enabled="{{ call.hold.localReminder.enable|default('0') }}"
            call.hold.localReminder.period="{{ call.hold.localReminder.period|default('60') }}"
            call.hold.localReminder.startDelay="{{ call.hold.localReminder.startDelay|default('90') }}"/>
      </hold>
   </call>

   <QOS>
      <Ethernet>
         <RTP qos.ethernet.rtp.user_priority="{{ qos.ethernet.user_priority.rtp|default('5') }}"/>
         <CallControl qos.ethernet.callControl.user_priority="{{ qos.ethernet.user_priority.callControl|default('5') }}"/>
         <Other qos.ethernet.other.user_priority="{{ qos.ethernet.user_priority.other|default('2') }}"/>
      </Ethernet>
      <IP>
         <RTP
	    qos.ip.rtp.dscp="{{ qos.rtp.dscp }}"
	    qos.ip.rtp.min_delay="{{ qos.rtp.min_delay|default('1') }}"
	    qos.ip.rtp.max_throughput="{{ qos.rtp.max_throughput|default('1') }}"
	    qos.ip.rtp.max_reliability="{{ qos.rtp.max_reliability|default('0') }}"
	    qos.ip.rtp.min_cost="{{ qos.rtp.min_cost|default('0') }}"
	    qos.ip.rtp.precedence="{{ qos.rtp.precedence|default('5') }}"/>

         <CallControl
	    qos.ip.callControl.dscp="{{ qos.ip.callControl.dscp }}"
	    qos.ip.callControl.min_delay="{{ qos.ip.callControl.min_delay|default('1') }}"
	    qos.ip.callControl.max_throughput="{{ qos.ip.callControl.max_throughput|default('0') }}"
	    qos.ip.callControl.max_reliability="{{ qos.ip.callControl.max_reliability|default('0') }}"
	    qos.ip.callControl.min_cost="{{ qos.ip.callControl.min_cost|default('0') }}"
	    qos.ip.callControl.precedence="{{ qos.ip.callControl.precedence|default('5') }}"/>
      </IP>
   </QOS>
   <TCP_IP>
      <netMon
        tcpIpApp.netMon.enabled="{{ tcp_ip.netMon.enable|default('1') }}"
        tcpIpApp.netMon.period="{{ tcp_ip.netMon.period|default('30') }}"/>

      <SNTP
        tcpIpApp.sntp.resyncPeriod="{{ tcp_ip.sntp.resyncPeriod|default('86400') }}"
        tcpIpApp.sntp.address="{{ tcp_ip.sntp.address.value }}"
        tcpIpApp.sntp.address.overrideDHCP="{{ tcp_ip.sntp.address.overrideDHCP|default('1') }}"
        tcpIpApp.sntp.gmtOffset="{{ tcp_ip.sntp.gmtOffset.value }}"
        tcpIpApp.sntp.gmtOffset.overrideDHCP="{{ tcp_ip.sntp.gmtOffset.overrideDHCP|default('1') }}"
        tcpIpApp.sntp.daylightSavings.enable="0"
        tcpIpApp.sntp.daylightSavings.fixedDayEnable="{{ tcp_ip.sntp.daylightSavings.fixedDayEnable|default('0') }}"
        tcpIpApp.sntp.daylightSavings.start.month="{{ tcp_ip.sntp.daylightSavings.start.month|default('3') }}"
        tcpIpApp.sntp.daylightSavings.start.date="{{ tcp_ip.sntp.daylightSavings.start.date|default('8') }}"
        tcpIpApp.sntp.daylightSavings.start.time="{{ tcp_ip.sntp.daylightSavings.start.time|default('2') }}"
        tcpIpApp.sntp.daylightSavings.start.dayOfWeek="{{ tcp_ip.sntp.daylightSavings.start.dayOfWeek.enable|default('1') }}"
        tcpIpApp.sntp.daylightSavings.start.dayOfWeek.lastInMonth="{{ tcp_ip.sntp.daylightSavings.start.dayOfWeek.lastInMonth|default('0') }}"
        tcpIpApp.sntp.daylightSavings.stop.month="{{ tcp_ip.sntp.daylightSavings.stop.month|default('11') }}"
        tcpIpApp.sntp.daylightSavings.stop.date="{{ tcp_ip.sntp.daylightSavings.stop.date|default('1') }}"
        tcpIpApp.sntp.daylightSavings.stop.time="{{ tcp_ip.sntp.daylightSavings.stop.time|default('2') }}"
        tcpIpApp.sntp.daylightSavings.stop.dayOfWeek="{{ tcp_ip.sntp.daylightSavings.stop.dayOfWeek.enable|default('1') }}"
        tcpIpApp.sntp.daylightSavings.stop.dayOfWeek.lastInMonth="{{ tcp_ip.sntp.daylightSavings.stop.dayOfWeek.lastInMonth|default('0') }}"/>

      <port>
         <RTP
            tcpIpApp.port.rtp.filterByIp="{{ tcp_ip.port.rtp.filterByIp|default('1') }}"
            tcpIpApp.port.rtp.filterByPort="{{ tcp_ip.port.rtp.filterByPort|default('0') }}"
            tcpIpApp.port.rtp.forceSend="{{ tcp_ip.port.rtp.forceSend }}"
            tcpIpApp.port.rtp.mediaPortRangeStart="{{ tcp_ip.port.rtp.mediaPortRangeStart }}"/>
      </port>

      <keepalive
        tcpIpApp.keepalive.tcp.idleTransmitInterval="{{ tcp_ip.keepalive.tcp.idleTransmitInterval }}"
        tcpIpApp.keepalive.tcp.noResponseTrasmitInterval="{{ tcp_ip.keepalive.tcp.noResponseTrasmitInterval }}"
        tcpIpApp.keepalive.tcp.sip.tls.enable="{{ tcp_ip.keepalive.tcp.sip.tls.enable|default('0') }}"/>
   </TCP_IP>

   <microbrowser mb.proxy="{{ mb.proxy }}">
      <main mb.main.home="{{ mb.main.home }}"/>

      <idleDisplay
        mb.idleDisplay.home="{{ mb.idleDisplay.home }}"
        mb.idleDisplay.refresh="{{ mb.idleDisplay.refresh|default('0') }}"/>

      <limits mb.limits.nodes="{{ mb.limits.nodes }}"
        mb.limits.cache="{{ mb.limits.cache}"/>

   </microbrowser>

   <usb usb.enable="{{ usb.enable }}">
      <bulkDrive
        usb.bulkDrive.enable="{{ usb.bulkDrive.enable }}"
        usb.bulkDrive.name="{{ usb.bulkDrive.name|default('usbDrive') }}"/>
   </usb>

   <logging>
      <level>
         <change log.level.change.so="4" log.level.change.app1="4" log.level.change.sip="4" log.level.change.sspsc="4" log.level.change.ssps="4" log.level.change.pps="4" log.level.change.net="4" log.level.change.cfg="4" log.level.change.cdp="4" log.level.change.pmt="4" log.level.change.ftp="4" log.level.change.ares="4" log.level.change.dns="4" log.level.change.cxss="4" log.level.change.httpd="4" log.level.change.rdisk="4" log.level.change.copy="4" log.level.change.slog="4" log.level.change.res="4" log.level.change.key="4" log.level.change.log="4" log.level.change.curl="4" log.level.change.rtos="4" log.level.change.mb="4" log.level.change.ib="4" log.level.change.sotet="4" log.level.change.ttrs="4" log.level.change.usb="{{ log.level.change.usb|default('4') }}"/>
      </level>
      <render log.render.level="1" log.render.type="2" log.render.realtime="1" log.render.stdout="1" log.render.file="1" log.render.file.size="16" log.render.file.upload.period="172800" log.render.file.upload.append="1" log.render.file.upload.append.sizeLimit="512" log.render.file.upload.append.limitMode="{{ log.render.file.upload.append.limitMode|default('delete') }}"/>
      <scheduled log.sched.1.name="showCpuLoad" log.sched.1.level="3" log.sched.1.period="15" log.sched.1.startMode="rel" log.sched.1.startTime="0" log.sched.1.startDay="0" log.sched.2.name="" log.sched.2.level="" log.sched.2.period="" log.sched.2.startMode="" log.sched.2.startTime="" log.sched.2.startDay="{{ log.sched.2.startDay }}"/>
   </logging>

</domain>